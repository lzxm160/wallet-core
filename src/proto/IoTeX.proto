syntax = "proto3";

package TW.IoTeX.Proto;
option java_package = "wallet.core.jni.proto";

message Transfer {
    string amount  = 1;
    string recipient = 2;
    bytes payload  = 3;
}

message Staking {
  // create stake
  message StakeCreate {
    string candidateName = 1;
    string stakedAmount = 2;
    uint32 stakedDuration = 3;
    bool autoStake = 4;
    bytes payload = 5;
  }

  // unstake or withdraw
  message StakeReclaim {
    uint64 bucketIndex = 1;
    bytes payload = 2;
  }

  // add the amount of bucket
  message StakeAddDeposit {
    uint64 bucketIndex = 1;
    string amount = 2;
    bytes payload = 3;
  }

  // restake the duration and autoStake flag of bucket
  message StakeRestake {
    uint64 bucketIndex = 1;
    uint32 stakedDuration = 2;
    bool autoStake = 3;
    bytes payload = 4;
  }

  // move the bucket to vote for another candidate or transfer the ownership of bucket to another voters
  message StakeChangeCandidate {
    uint64 bucketIndex = 1;
    string candidateName = 2;
    bytes payload = 3;
  }

  message StakeTransferOwnership {
    uint64 bucketIndex = 1;
    string voterAddress = 2;
    bytes payload = 3;
  }

  message CandidateBasicInfo {
    string name = 1;
    string operatorAddress = 2;
    string rewardAddress = 3;
  }

  message CandidateRegister {
    CandidateBasicInfo candidate = 1;
    string stakedAmount = 2;
    uint32 stakedDuration = 3;
    bool autoStake = 4;
    string ownerAddress = 5; // if ownerAddress is absent, owner of candidate is the sender
    bytes payload = 6;
  }
  oneof message {
    StakeCreate stakeCreate = 1;
    StakeReclaim stakeUnstake = 2;
    StakeReclaim stakeWithdraw = 3;
    StakeAddDeposit stakeAddDeposit = 4;
    StakeRestake stakeRestake = 5;
    StakeChangeCandidate stakeChangeCandidate = 6;
    StakeTransferOwnership stakeTransferOwnership = 7;
    CandidateRegister candidateRegister = 8;
    CandidateBasicInfo candidateUpdate = 9;
  }
}

message ContractCall {
    string amount  = 1;
    string contract = 2;
    bytes data = 3;
}

// transaction signing input
message SigningInput {
    uint32 version = 1;
    uint64 nonce = 2;
    uint64 gasLimit = 3;
    string gasPrice = 4;
    bytes privateKey = 5;
    oneof action {
        Transfer transfer = 10;
        Staking staking = 11;
        ContractCall call = 12;
  }
}

// transaction signing output
message SigningOutput {
    // Signed and encoded Action bytes
    bytes encoded = 1;

    // Signed Action hash
    bytes hash = 2;
}

message ActionCore {
  uint32 version = 1;
  uint64 nonce = 2;
  uint64 gasLimit = 3;
  string gasPrice = 4;
  oneof action {
    Transfer transfer = 10;
    Staking staking = 11;
    ContractCall call = 12;
  }
}

message Action {
  ActionCore core = 1;
  bytes senderPubKey = 2;
  bytes signature = 3;
}